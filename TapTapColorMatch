<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Tap Tap Color Match</title>
    <script src="https://unpkg.com/@farcade/game-sdk@latest/dist/index.min.js"></script>
    <style>
      body {
        margin: 0;
        overflow: hidden;
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        background-color: #f0f0f0;
        touch-action: none;
      }
      canvas {
        display: block;
      }
      #startScreen {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.7);
        color: white;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        font-family: Arial, sans-serif;
        cursor: pointer;
      }
      #startScreen span {
        font-size: 32px;
      }
    </style>
  </head>
  <body>
    <div id="startScreen">
      <span>Tap to Start</span>
    </div>
    <canvas id="gameCanvas"></canvas>
    <script>
      const canvas = document.getElementById("gameCanvas");
      const ctx = canvas.getContext("2d");
      const startScreen = document.getElementById("startScreen");

      canvas.width = 360;
      canvas.height = 640;

      let gameStarted = false;
      let gameOver = false;
      let score = 0;
      let fallSpeed = 2;
      let isMuted = false;

      const colors = ["#FF6B6B", "#4ECDC4", "#45B7D1", "#96CEB4"];
      const shapes = ["circle", "square", "triangle"];

      let currentShape = {
        x: canvas.width / 2,
        y: -50,
        type: shapes[Math.floor(Math.random() * shapes.length)],
        color: colors[Math.floor(Math.random() * colors.length)],
        size: 30, // Reduced size to avoid overlapping multiple segments
      };

      const wheel = {
        x: canvas.width / 2,
        y: canvas.height - 100,
        radius: 80, // Increased radius for clearer segment separation
        segments: colors.length,
        rotation: 0,
      };

      function drawShape(shape) {
        ctx.fillStyle = shape.color;
        ctx.beginPath();
        if (shape.type === "circle") {
          ctx.arc(shape.x, shape.y, shape.size / 2, 0, Math.PI * 2);
        } else if (shape.type === "square") {
          ctx.rect(shape.x - shape.size / 2, shape.y - shape.size / 2, shape.size, shape.size);
        } else if (shape.type === "triangle") {
          ctx.moveTo(shape.x, shape.y - shape.size / 2);
          ctx.lineTo(shape.x - shape.size / 2, shape.y + shape.size / 2);
          ctx.lineTo(shape.x + shape.size / 2, shape.y + shape.size / 2);
          ctx.closePath();
        }
        ctx.fill();
      }

      function drawWheel() {
        const anglePerSegment = (2 * Math.PI) / wheel.segments;
        for (let i = 0; i < wheel.segments; i++) {
          ctx.beginPath();
          ctx.fillStyle = colors[i];
          ctx.moveTo(wheel.x, wheel.y);
          ctx.arc(
            wheel.x,
            wheel.y,
            wheel.radius,
            wheel.rotation + i * anglePerSegment,
            wheel.rotation + (i + 1) * anglePerSegment,
          );
          ctx.fill();
        }
      }

      function getWheelSegmentAtCenter() {
        // Use the shape's exact center for segment detection
        const dx = currentShape.x - wheel.x;
        const dy = currentShape.y - wheel.y;
        let angle = Math.atan2(dy, dx);

        // Normalize angle with respect to wheel rotation
        angle = (angle - wheel.rotation + 2 * Math.PI) % (2 * Math.PI);
        if (angle < 0) angle += 2 * Math.PI;

        const anglePerSegment = (2 * Math.PI) / wheel.segments;
        const segmentIndex = Math.floor(angle / anglePerSegment);
        return colors[segmentIndex];
      }

      function updateGame() {
        if (!gameStarted || gameOver) return;

        currentShape.y += fallSpeed;

        // Check collision when shape's bottom reaches wheel's top
        const shapeBottomY = currentShape.y + currentShape.size / 2;
        const wheelTopY = wheel.y - wheel.radius;
        const distanceToCenter = Math.sqrt(
          Math.pow(currentShape.x - wheel.x, 2) + Math.pow(currentShape.y - wheel.y, 2),
        );

        if (shapeBottomY >= wheelTopY && distanceToCenter <= wheel.radius) {
          const wheelColor = getWheelSegmentAtCenter();
          if (wheelColor === currentShape.color) {
            score++;
            fallSpeed += 0.1;
            spawnNewShape();
            window.FarcadeSDK.singlePlayer.actions.hapticFeedback();
          } else {
            gameOver = true;
            window.FarcadeSDK.singlePlayer.actions.gameOver({ score: score });
          }
        }

        if (currentShape.y > canvas.height + currentShape.size) {
          gameOver = true;
          window.FarcadeSDK.singlePlayer.actions.gameOver({ score: score });
        }
      }

      function spawnNewShape() {
        currentShape = {
          x: canvas.width / 2,
          y: -50,
          type: shapes[Math.floor(Math.random() * shapes.length)],
          color: colors[Math.floor(Math.random() * colors.length)],
          size: 30,
        };
      }

      function drawScore() {
        ctx.fillStyle = "black";
        ctx.font = "24px Arial";
        ctx.fillText(`Score: ${score}`, 20, 40);
      }

      function resetGame() {
        score = 0;
        fallSpeed = 2;
        gameOver = false;
        gameStarted = false;
        spawnNewShape();
        startScreen.style.display = "flex";
      }

      function startGame() {
        if (!gameStarted) {
          gameStarted = true;
          startScreen.style.display = "none";
          window.FarcadeSDK.singlePlayer.actions.hapticFeedback();
        }
      }

      function gameLoop() {
        ctx.clearRect(0, 0, canvas.width, canvas.height);

        drawWheel();
        if (gameStarted) drawShape(currentShape);
        drawScore();
        updateGame();

        if (gameOver) {
          ctx.fillStyle = "rgba(0, 0, 0, 0.7)";
          ctx.fillRect(0, 0, canvas.width, canvas.height);
          ctx.fillStyle = "white";
          ctx.font = "32px Arial";
          ctx.textAlign = "center";
          ctx.fillText("Game Over", canvas.width / 2, canvas.height / 2 - 20);
          ctx.fillText(`Score: ${score}`, canvas.width / 2, canvas.height / 2 + 20);
          ctx.fillText("Tap to Restart", canvas.width / 2, canvas.height / 2 + 60);
        }

        requestAnimationFrame(gameLoop);
      }

      function handleTap() {
        if (gameOver) {
          resetGame();
          startGame();
        } else if (!gameStarted) {
          startGame();
        } else {
          wheel.rotation += (2 * Math.PI) / wheel.segments;
          window.FarcadeSDK.singlePlayer.actions.hapticFeedback();
        }
      }

      startScreen.addEventListener("click", startGame);
      startScreen.addEventListener("touchstart", (e) => {
        e.preventDefault();
        startGame();
      });

      canvas.addEventListener("click", handleTap);
      canvas.addEventListener("touchstart", (e) => {
        e.preventDefault();
        handleTap();
      });

      window.FarcadeSDK.on("play_again", () => {
        resetGame();
        startGame();
      });

      window.FarcadeSDK.on("toggle_mute", (data) => {
        isMuted = data.isMuted;
      });

      gameLoop();
      window.FarcadeSDK.singlePlayer.actions.ready();
    </script>
  </body>
</html>
