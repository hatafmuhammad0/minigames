<!doctype html>
<html lang="en">
  <head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Snake Game</title>
    <script src="https://unpkg.com/@farcade/game-sdk@latest/dist/index.min.js"></script>
  </head>
  <body>
    <script>
      // Game Constants & Variables
      let inputDir = { x: 0, y: 0 };
      const foodSound = new Audio(
        "https://lqy3lriiybxcejon.public.blob.vercel-storage.com/WNvAGwPB8Gqz/food-2SjtHAXyNcm6gHwBixvfD3UrZOmaQr.mpeg",
      );
      const gameOverSound = new Audio(
        "https://lqy3lriiybxcejon.public.blob.vercel-storage.com/WNvAGwPB8Gqz/gameover-sH1swzOlb4nB70mtZmUuViE77wlVYC.mpeg",
      );
      const moveSound = new Audio(
        "https://lqy3lriiybxcejon.public.blob.vercel-storage.com/WNvAGwPB8Gqz/move-qM925ztHP0lR1sCz28sKjx47f3lmT7.mpeg",
      );

      // Set volume to 15% for all sounds
      [foodSound, gameOverSound, moveSound].forEach((sound) => {
        sound.volume = 0.15;
      });

      let speed = 10;
      let score = 0;
      let lastPaintTime = 0;
      let snakeArr = [{ x: 13, y: 15 }];
      let food = { x: 6, y: 7 };
      let isGameOver = false;
      const GRID_SIZE = 18;

      // DOM setup
      document.body.innerHTML = `
            <div id="game-container">
                <div id="scoreBox">Score: 0</div>
                <div id="board"></div>
            </div>
        `;

      // Add CSS
      document.head.insertAdjacentHTML(
        "beforeend",
        `
            <style>
                html, body {
                    height: 100%;
                    margin: 0;
                    padding: 0;
                    overflow: hidden;
                }
                #game-container {
                    display: flex;
                    flex-direction: column;
                    align-items: center;
                    justify-content: center;
                    height: 100vh;
                    background: url('https://lqy3lriiybxcejon.public.blob.vercel-storage.com/WNvAGwPB8Gqz/bg-DvP7V4USOsY5Y24hxpapeSq7MThnet.jpeg') no-repeat center center/cover;
                    touch-action: none;
                }
                #board {
                    display: grid;
                    grid-template-rows: repeat(${GRID_SIZE}, 1fr);
                    grid-template-columns: repeat(${GRID_SIZE}, 1fr);
                    width: 90vmin;
                    height: 90vmin;
                    border: 2px solid black;
                    background: linear-gradient(rgb(170, 236, 170), rgb(236, 236, 167));
                    overflow: hidden;
                }
                .head {
                    background: linear-gradient(rgb(240, 124, 124), rgb(228, 228, 129));
                    border: 2px solid black;
                    border-radius: 5px;
                }
                .snake {
                    background-color: purple;
                    border: 0.25vmin solid white;
                    border-radius: 5px;
                }
                .food {
                    background: linear-gradient(red, purple);
                    border: 0.25vmin solid black;
                    border-radius: 5px;
                }
            </style>
        `,
      );

      // Game Functions
      function main(ctime) {
        window.requestAnimationFrame(main);
        if ((ctime - lastPaintTime) / 1000 < 1 / speed || isGameOver) {
          return;
        }
        lastPaintTime = ctime;
        gameEngine();
      }

      function isCollide(snake) {
        for (let i = 1; i < snake.length; i++) {
          if (snake[i].x === snake[0].x && snake[i].y === snake[0].y) return true;
        }
        return snake[0].x > GRID_SIZE || snake[0].x < 1 || snake[0].y > GRID_SIZE || snake[0].y < 1;
      }

      function gameEngine() {
        const board = document.getElementById("board");
        if (!board) return;

        if (isCollide(snakeArr)) {
          gameOverSound.play();
          inputDir = { x: 0, y: 0 };
          isGameOver = true;
          window.FarcadeSDK.singlePlayer.actions.gameOver({ score: score });
          return;
        }

        if (snakeArr[0].y === food.y && snakeArr[0].x === food.x) {
          foodSound.play();
          score += 1;
          document.getElementById("scoreBox").innerHTML = "Score: " + score;
          snakeArr.unshift({ x: snakeArr[0].x + inputDir.x, y: snakeArr[0].y + inputDir.y });
          let a = 1,
            b = GRID_SIZE;
          food = {
            x: Math.round(a + (b - a) * Math.random()),
            y: Math.round(a + (b - a) * Math.random()),
          };
          window.FarcadeSDK.singlePlayer.actions.hapticFeedback();
        }

        for (let i = snakeArr.length - 2; i >= 0; i--) {
          snakeArr[i + 1] = { ...snakeArr[i] };
        }

        snakeArr[0].x += inputDir.x;
        snakeArr[0].y += inputDir.y;

        board.innerHTML = "";
        snakeArr.forEach((e, index) => {
          if (e.x >= 1 && e.x <= GRID_SIZE && e.y >= 1 && e.y <= GRID_SIZE) {
            let snakeElement = document.createElement("div");
            snakeElement.style.gridRowStart = e.y;
            snakeElement.style.gridColumnStart = e.x;
            snakeElement.classList.add(index === 0 ? "head" : "snake");
            board.appendChild(snakeElement);
          }
        });

        if (food.x >= 1 && food.x <= GRID_SIZE && food.y >= 1 && food.y <= GRID_SIZE) {
          let foodElement = document.createElement("div");
          foodElement.style.gridRowStart = food.y;
          foodElement.style.gridColumnStart = food.x;
          foodElement.classList.add("food");
          board.appendChild(foodElement);
        }
      }

      function resetGame() {
        snakeArr = [{ x: 13, y: 15 }];
        food = { x: 6, y: 7 };
        inputDir = { x: 0, y: 0 };
        score = 0;
        isGameOver = false;
        document.getElementById("scoreBox").innerHTML = "Score: 0";
        window.FarcadeSDK.singlePlayer.actions.ready();
      }

      // Keyboard controls
      document.addEventListener("keydown", (e) => {
        if (isGameOver) return;
        moveSound.play();
        window.FarcadeSDK.singlePlayer.actions.hapticFeedback();
        switch (e.key) {
          case "ArrowUp":
            if (inputDir.y !== 1) inputDir = { x: 0, y: -1 };
            break;
          case "ArrowDown":
            if (inputDir.y !== -1) inputDir = { x: 0, y: 1 };
            break;
          case "ArrowLeft":
            if (inputDir.x !== 1) inputDir = { x: -1, y: 0 };
            break;
          case "ArrowRight":
            if (inputDir.x !== -1) inputDir = { x: 1, y: 0 };
            break;
        }
      });

      // Swipe controls for mobile with scroll prevention
      let touchStartX = 0,
        touchStartY = 0;
      document.addEventListener(
        "touchstart",
        (e) => {
          e.preventDefault();
          touchStartX = e.changedTouches[0].screenX;
          touchStartY = e.changedTouches[0].screenY;
        },
        { passive: false },
      );

      document.addEventListener(
        "touchend",
        (e) => {
          e.preventDefault();
          if (isGameOver) return;
          const touchEndX = e.changedTouches[0].screenX;
          const touchEndY = e.changedTouches[0].screenY;
          const deltaX = touchEndX - touchStartX;
          const deltaY = touchEndY - touchStartY;

          if (Math.abs(deltaX) > Math.abs(deltaY)) {
            if (deltaX > 30 && inputDir.x !== -1) inputDir = { x: 1, y: 0 };
            else if (deltaX < -30 && inputDir.x !== 1) inputDir = { x: -1, y: 0 };
          } else {
            if (deltaY > 30 && inputDir.y !== -1) inputDir = { x: 0, y: 1 };
            else if (deltaY < -30 && inputDir.y !== 1) inputDir = { x: 0, y: -1 };
          }
          moveSound.play();
          window.FarcadeSDK.singlePlayer.actions.hapticFeedback();
        },
        { passive: false },
      );

      // Farcade SDK Integration
      window.FarcadeSDK.on("play_again", resetGame);
      window.FarcadeSDK.on("toggle_mute", (data) => {
        const isMuted = data.isMuted;
        foodSound.muted = isMuted;
        gameOverSound.muted = isMuted;
        moveSound.muted = isMuted;
      });

      // Start game
      window.FarcadeSDK.singlePlayer.actions.ready();
      window.requestAnimationFrame(main);
    </script>
  </body>
</html>
